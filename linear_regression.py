# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U79OpK_c2G5JYbm25Z6vskECkvUFZqeV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.linear_model

oecd_bli = pd.read_csv("/content/drive/MyDrive/BLI_02102021135244551.csv", thousands=',')   
#thousands=',' deals with data values such as 1,000(having commas) so using this 1,000 gets converted to 1000 in the final data frame
gdp_per_capita = pd.read_csv("/content/drive/MyDrive/gdp_data.csv",thousands=',',encoding='latin1', na_values="n/a").dropna() 
#delimiter specifies the separator between data items, sep and delimiter can be used interchangeably. Though to_read does not allows delimiter, it allows only sep.
#encoding allows us to specify an encoding to use when reading a file. for example to read a file containing chinese language characters we have to specify encoding='gb2312'. In this code latin1 is used for western europe language.
#na_values tells pandas to consider "n/a" as NaN value and replace "n/a" with NaN in the data frame

oecd_bli.head()

from google.colab import drive
drive.mount('/content/drive')

gdp_per_capita.head()

col=gdp_per_capita.columns
num_col=gdp_per_capita[col[9:len(col)-1]].columns
gdp_per_capita[num_col] = gdp_per_capita[num_col].replace({',': ''}, regex=True)

gdp_per_capita.head()

# Get countries + Life satisfaction
oecd_bli = oecd_bli[['Country', 'Value']][oecd_bli['Indicator'] == 'Life satisfaction']
oecd_bli = oecd_bli.rename(columns={'Value': 'Life satisfaction'})
oecd_bli.head()

# Get countries + GDP
gdp_per_capita = gdp_per_capita[['Country', '2015']]
gdp_per_capita = gdp_per_capita.rename(columns={'2015': 'GDP per capita (USD)'})
# filter to get a similar dataframe to the book's
gdp_per_capita = gdp_per_capita[gdp_per_capita['GDP per capita (USD)'].astype(float) <= 60000]
gdp_per_capita['GDP per capita (USD)'] = gdp_per_capita['GDP per capita (USD)'].astype('float64')
gdp_per_capita.head()

# Join GDP & Life satisfaction tables + Group by country as the unique column and average-aggregate GDP & Life satisfaction
country_stats = pd.merge(oecd_bli, gdp_per_capita, on='Country').groupby(by=['Country']).mean().reset_index()
country_stats.head()

# merge = it merges different columns on the basis of its parameters. Here we have used "on" parameter which tells the columns (names) to join on. So we will join the "Country" column.
# group by= it is used to group a data frame on one column. So here we have grouped the data frame on the basis of "Country". Internally it forms a dictionary with the data values of County column as keys and a list of indexes of that country as the value.
# mean() = it calculates mean around the specified axis(in this case axis=0). Since groupby returned a dictionary, this mean will calcualte the mean for each key taking into consideration the indexes provided in the list.
# reset_index= this resets the index back to default 0,1,2,3

# get GDP for the x-axis and Life Satisfaction for the y-axis
X = country_stats['GDP per capita (USD)'].values.reshape(-1, 1)
y = country_stats['Life satisfaction'].values.reshape(-1, 1)
# reshape=> gives new shape to data without changing its values. np.reshape(a,(2,3)) shapes the array "a" into a vector of 2 rows and 3 columns. 
# np.reshape(a,6) shapes the array "a" into a 1-D array of length 6.  np.reshape(a,(3,-1)) shapes the array "a" into a vector with 3 rows and -1 signifies that reshape will calculate the number of columns by itself. One shape dimension can be -1.
X.shape, y.shape
# shape returns a tupple where 1st element indicates number of rows and 2nd element indicates number of columns

# Visualize Data
country_stats.plot(kind='scatter', x='GDP per capita (USD)', y='Life satisfaction', xlim=(0, 30000), ylim=(2,8))
# plot => plots a line graph between x and y asix if no other parameter is given. kind='scatter' defines that the plot should be scatter plot. 
# xlim and ylim are used to set the limits on x and y-axis respectively. (0,30000) indicates that the x-axis should start from 0 and ends at 60000
plt.show()

# Select a Linear Model
model = sklearn.linear_model.LinearRegression()

# Train the Model
model.fit(X, y,)
# fit => it fits the model where X=array of training data with shape (no.of samples, no.of features), y=array of target values with shape (no. of samples, no. of targets)

# Make a prediction for Cyprus
X_new = [[22587]]  # Cyprus GDP per capita
print(model.predict(X_new))

# let's visualize our model, because it's a linear one, we can plot it using two points
X = [[5000], [30000]]
y_hat = model.predict(X)

y_hat

# Visualize Data
country_stats.plot(kind='scatter', x='GDP per capita (USD)', y='Life satisfaction', xlim=(0, 30000), ylim=(2,8))
plt.plot(X, y_hat, c='red')
plt.show()